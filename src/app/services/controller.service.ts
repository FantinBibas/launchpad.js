import {Injectable} from '@angular/core';
import {MidiService} from './midi.service';
import {TimeInterval} from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ControllerService {
  printableCharacters: {[key: string]: number[][]} = {
    a: [
      [0, 1, 1, 0],
      [1, 0, 0, 1],
      [1, 1, 1, 1],
      [1, 0, 0, 1],
      [1, 0, 0, 1],
    ],
    b: [
      [1, 1, 1, 0],
      [1, 0, 0, 1],
      [1, 1, 1, 0],
      [1, 0, 0, 1],
      [1, 1, 1, 0],
    ],
    c: [
      [0, 1, 1, 0],
      [1, 0, 0, 1],
      [1, 0, 0, 0],
      [1, 0, 0, 1],
      [0, 1, 1, 0],
    ],
    d: [
      [1, 1, 1, 0],
      [1, 0, 0, 1],
      [1, 0, 0, 1],
      [1, 0, 0, 1],
      [1, 1, 1, 0],
    ],
    e: [
      [1, 1, 1, 1],
      [1, 0, 0, 0],
      [1, 1, 1, 0],
      [1, 0, 0, 0],
      [1, 1, 1, 1],
    ],
    f: [
      [1, 1, 1, 1],
      [1, 0, 0, 0],
      [1, 1, 1, 0],
      [1, 0, 0, 0],
      [1, 0, 0, 0],
    ],
    g: [
      [0, 1, 1, 0],
      [1, 0, 0, 0],
      [1, 0, 1, 1],
      [1, 0, 0, 1],
      [0, 1, 1, 0],
    ],
    h: [
      [1, 0, 0, 1],
      [1, 0, 0, 1],
      [1, 1, 1, 1],
      [1, 0, 0, 1],
      [1, 0, 0, 1],
    ],
    i: [
      [1],
      [1],
      [1],
      [1],
      [1],
    ],
    j: [
      [0, 0, 0, 1],
      [0, 0, 0, 1],
      [0, 0, 0, 1],
      [1, 0, 0, 1],
      [0, 1, 1, 0],
    ],
    k: [
      [1, 0, 0, 1],
      [1, 0, 1, 0],
      [1, 1, 0, 0],
      [1, 0, 1, 0],
      [1, 0, 0, 1],
    ],
    l: [
      [1, 0, 0, 0],
      [1, 0, 0, 0],
      [1, 0, 0, 0],
      [1, 0, 0, 0],
      [1, 1, 1, 1],
    ],
    m: [
      [1, 0, 0, 1],
      [1, 1, 1, 1],
      [1, 0, 0, 1],
      [1, 0, 0, 1],
      [1, 0, 0, 1],
    ],
    n: [
      [1, 0, 0, 1],
      [1, 1, 0, 1],
      [1, 0, 1, 1],
      [1, 0, 0, 1],
      [1, 0, 0, 1],
    ],
    o: [
      [0, 1, 1, 0],
      [1, 0, 0, 1],
      [1, 0, 0, 1],
      [1, 0, 0, 1],
      [0, 1, 1, 0],
    ],
    p: [
      [1, 1, 1, 0],
      [1, 0, 0, 1],
      [1, 1, 1, 0],
      [1, 0, 0, 0],
      [1, 0, 0, 0],
    ],
    q: [
      [0, 1, 1, 0],
      [1, 0, 0, 1],
      [1, 0, 0, 1],
      [1, 0, 1, 1],
      [0, 1, 1, 1],
    ],
    r: [
      [1, 1, 1, 0],
      [1, 0, 0, 1],
      [1, 1, 1, 0],
      [1, 0, 1, 0],
      [1, 0, 0, 1],
    ],
    s: [
      [0, 1, 1, 1],
      [1, 0, 0, 0],
      [0, 1, 1, 0],
      [0, 0, 0, 1],
      [1, 1, 1, 0],
    ],
    t: [
      [1, 1, 1],
      [0, 1, 0],
      [0, 1, 0],
      [0, 1, 0],
      [0, 1, 0],
    ],
    u: [
      [1, 0, 0, 1],
      [1, 0, 0, 1],
      [1, 0, 0, 1],
      [1, 0, 0, 1],
      [0, 1, 1, 0],
    ],
    v: [
      [1, 0, 1],
      [1, 0, 1],
      [1, 0, 1],
      [1, 0, 1],
      [0, 1, 0],
    ],
    w: [
      [1, 0, 0, 1],
      [1, 0, 0, 1],
      [1, 0, 0, 1],
      [1, 1, 1, 1],
      [1, 0, 0, 1],
    ],
    x: [
      [1, 0, 0, 1],
      [1, 0, 0, 1],
      [0, 1, 1, 0],
      [1, 0, 0, 1],
      [1, 0, 0, 1],
    ],
    y: [
      [1, 0, 1],
      [1, 0, 1],
      [1, 1, 1],
      [0, 1, 0],
      [0, 1, 0],
    ],
    z: [
      [1, 1, 1, 1],
      [0, 0, 0, 1],
      [0, 1, 1, 0],
      [1, 0, 0, 0],
      [1, 1, 1, 1],
    ],
    0: [
      [0, 1, 1, 0],
      [1, 0, 1, 1],
      [1, 1, 0, 1],
      [1, 0, 0, 1],
      [0, 1, 1, 0],
    ],
    1: [
      [0, 1],
      [1, 1],
      [0, 1],
      [0, 1],
      [0, 1],
    ],
    2: [
      [0, 1, 1, 0],
      [1, 0, 0, 1],
      [0, 0, 1, 0],
      [0, 1, 0, 0],
      [1, 1, 1, 1],
    ],
    3: [
      [1, 1, 1, 0],
      [0, 0, 0, 1],
      [0, 1, 1, 0],
      [0, 0, 0, 1],
      [1, 1, 1, 1],
    ],
    4: [
      [1, 0, 0, 1],
      [1, 0, 0, 1],
      [1, 1, 1, 1],
      [0, 0, 0, 1],
      [0, 0, 0, 1],
    ],
    5: [
      [1, 1, 1, 1],
      [1, 0, 0, 0],
      [1, 1, 1, 0],
      [0, 0, 0, 1],
      [1, 1, 1, 0],
    ],
    6: [
      [0, 1, 1, 0],
      [1, 0, 0, 0],
      [1, 1, 1, 0],
      [1, 0, 0, 1],
      [0, 1, 1, 0],
    ],
    7: [
      [1, 1, 1, 1],
      [0, 0, 0, 1],
      [0, 0, 1, 0],
      [0, 0, 1, 0],
      [0, 0, 1, 0],
    ],
    8: [
      [0, 1, 1, 0],
      [1, 0, 0, 1],
      [0, 1, 1, 0],
      [1, 0, 0, 1],
      [0, 1, 1, 0],
    ],
    9: [
      [0, 1, 1, 0],
      [1, 0, 0, 1],
      [0, 1, 1, 1],
      [0, 0, 0, 1],
      [0, 1, 1, 0],
    ],
    '.': [
      [0],
      [0],
      [0],
      [0],
      [1],
    ],
    ',': [
      [0, 0],
      [0, 0],
      [0, 0],
      [0, 1],
      [1, 0],
    ],
    '"': [
      [1, 0, 1],
      [1, 0, 1],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
    ],
    '\'': [
      [1],
      [1],
      [0],
      [0],
      [0],
    ],
    '?': [
      [1, 1, 0],
      [0, 0, 1],
      [0, 1, 0],
      [0, 0, 0],
      [0, 1, 0],
    ],
    '!': [
      [1],
      [1],
      [1],
      [0],
      [1],
    ],
    '@': [
      [0, 1, 1, 0],
      [1, 0, 0, 1],
      [1, 0, 1, 1],
      [1, 0, 0, 0],
      [0, 1, 1, 1],
    ],
    _: [
      [0, 0, 0, 0],
      [0, 0, 0, 0],
      [0, 0, 0, 0],
      [0, 0, 0, 0],
      [1, 1, 1, 1],
    ],
    '*': [
      [1, 0, 0, 1],
      [0, 1, 1, 0],
      [1, 1, 1, 1],
      [0, 1, 1, 0],
      [1, 0, 0, 1],
    ],
    '#': [
      [1, 0, 1, 0],
      [1, 1, 1, 1],
      [1, 0, 1, 0],
      [1, 1, 1, 1],
      [1, 0, 1, 0],
    ],
    $: [
      [0, 1, 1, 1],
      [1, 0, 1, 0],
      [0, 1, 1, 0],
      [0, 1, 0, 1],
      [1, 1, 1, 0],
    ],
    '%': [
      [1, 1, 0, 0],
      [0, 0, 0, 1],
      [0, 1, 1, 0],
      [1, 0, 0, 0],
      [0, 0, 1, 1],
    ],
    '&': [
      [0, 1, 0, 0],
      [1, 0, 1, 0],
      [0, 1, 0, 0],
      [1, 0, 1, 0],
      [0, 1, 0, 1],
    ],
    '(': [
      [0, 1],
      [1, 0],
      [1, 0],
      [1, 0],
      [0, 1],
    ],
    ')': [
      [1, 0],
      [0, 1],
      [0, 1],
      [0, 1],
      [1, 0],
    ],
    '+': [
      [0, 0, 0],
      [0, 1, 0],
      [1, 1, 1],
      [0, 1, 0],
      [0, 0, 0],
    ],
    '-': [
      [0, 0, 0],
      [0, 0, 0],
      [1, 1, 1],
      [0, 0, 0],
      [0, 0, 0],
    ],
    '/': [
      [0, 0, 1],
      [0, 0, 1],
      [0, 1, 0],
      [1, 0, 0],
      [1, 0, 0],
    ],
    ':': [
      [0],
      [1],
      [0],
      [1],
      [0],
    ],
    ';': [
      [0],
      [1],
      [0],
      [1],
      [1],
    ],
    '<': [
      [0, 0, 1],
      [0, 1, 0],
      [1, 0, 0],
      [0, 1, 0],
      [0, 0, 1],
    ],
    '=': [
      [0, 0, 0],
      [1, 1, 1],
      [0, 0, 0],
      [1, 1, 1],
      [0, 0, 0],
    ],
    '>': [
      [1, 0, 0],
      [0, 1, 0],
      [0, 0, 1],
      [0, 1, 0],
      [1, 0, 0],
    ],
    '[': [
      [1, 1],
      [1, 0],
      [1, 0],
      [1, 0],
      [1, 1],
    ],
    '\\': [
      [1, 0, 0],
      [1, 0, 0],
      [0, 1, 0],
      [0, 0, 1],
      [0, 0, 1],
    ],
    ']': [
      [1, 1],
      [0, 1],
      [0, 1],
      [0, 1],
      [1, 1],
    ],
    '^': [
      [0, 1, 0],
      [1, 0, 1],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
    ],
    '`': [
      [1, 0],
      [0, 1],
      [0, 0],
      [0, 0],
      [0, 0],
    ],
    '{': [
      [0, 1, 1],
      [0, 1, 0],
      [1, 1, 0],
      [0, 1, 0],
      [0, 1, 1],
    ],
    '|': [
      [1],
      [1],
      [0],
      [1],
      [1],
    ],
    '}': [
      [1, 1, 0],
      [0, 1, 0],
      [0, 1, 1],
      [0, 1, 0],
      [1, 1, 0],
    ],
    '~': [
      [0, 0, 0, 0],
      [0, 1, 0, 1],
      [1, 0, 1, 0],
      [0, 0, 0, 0],
      [0, 0, 0, 0],
    ],
    ' ': [
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
      [0, 0, 0],
    ],
  };

  constructor(
    private midiService: MidiService
  ) {
  }

  drawCharToGridPosition(outputId: string, x: number, y: number, char: string, fontColor: number, backgroundColor: number = 0): void {
    char = char.toLowerCase();
    if (Object.keys(this.printableCharacters).includes(char)) {
      this.midiService.drawToGridPosition(outputId, x, y,
        this.printableCharacters[char].map(line => line.map(pixel => pixel ? fontColor : backgroundColor))
      );
    }
  }

  drawTextToGridPosition(outputId: string, x: number, y: number, text: string, fontColor: number, backgroundColor: number = 0): number {
    let firstLetter = true;

    for (let letter of text) {
      letter = letter.toLowerCase();
      if (!Object.keys(this.printableCharacters).includes(letter)) {
        letter = ' ';
      }
      if (!firstLetter) {
        this.midiService.drawToGridPosition(outputId, x, y,
          [[backgroundColor], [backgroundColor], [backgroundColor], [backgroundColor], [backgroundColor]]
        );
        x += 1;
      }
      this.drawCharToGridPosition(outputId, x, y, letter, fontColor, backgroundColor);
      x += this.printableCharacters[letter][0].length;
      firstLetter = false;
    }
    return x;
  }

  scrollTextOnGrid(
    outputId: string, text: string, fontColor: number, backgroundColor: number = 0, scrollInterval = 300, y: number = 0
  ): void {
    let interval: number;
    let offset = 0;

    interval = setInterval(() => {
      const endOffset = this.drawTextToGridPosition(outputId, offset, y, text, fontColor, backgroundColor);
      offset -= 1;
      if (endOffset <= 0 && interval) {
        clearInterval(interval);
      }
    }, scrollInterval);
  }
}
